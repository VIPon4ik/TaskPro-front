module.exports = {
  root: true,
  env: {
      browser: true,
      es6: true,
      node: true,
  },
  ignorePatterns: ['**/environments/**/*', '*.spec.ts'],
  overrides: [
      {
          files: ['*.ts'],
          parser: '@typescript-eslint/parser',
          parserOptions: {
              tsconfigRootDir: __dirname,
              sourceType: 'module',
              project: ['./tsconfig.json'],
          },
          plugins: ['eslint-plugin-import', '@typescript-eslint', '@angular-eslint', 'rxjs-angular', 'unused-imports'],
          extends: ['plugin:@angular-eslint/recommended', 'plugin:@angular-eslint/template/process-inline-templates', 'plugin:rxjs/recommended'],
          rules: {
              // rxjs
              'rxjs/no-ignored-takewhile-value': 'off',
              'rxjs/no-async-subscribe': 'error',
              'rxjs/no-nested-subscribe': 'error',
              'rxjs/no-subscribe-handlers': 'error',
              'rxjs/no-unbound-methods': 'error',
              'rxjs-angular/prefer-takeuntil': [
                  'error',
                  {
                      alias: ['untilDestroyed'],
                      checkComplete: true,
                      checkDecorators: ['Component', 'Directive'],
                  }
              ],
              // TS
              '@typescript-eslint/no-explicit-any': 'error',
              '@typescript-eslint/array-type': [
                  'error',
                  {
                      default: 'array',
                  },
              ],
              '@typescript-eslint/consistent-type-definitions': 'error',
              '@typescript-eslint/dot-notation': 'off',
              '@typescript-eslint/explicit-member-accessibility': [
                  'error',
                  {
                      accessibility: 'explicit',
                      overrides: {
                          accessors: 'no-public',
                          constructors: 'no-public',
                          methods: 'no-public',
                          properties: 'no-public',
                          parameterProperties: 'no-public',
                      },
                  },
              ],
              indent: 'off',
              '@typescript-eslint/indent': ['error', 2],
              '@typescript-eslint/member-delimiter-style': 'error',
              '@typescript-eslint/member-ordering': 'error',
              'no-empty': 'off',
              'no-empty-function': 'off',
              '@typescript-eslint/no-empty-function': 'off',
              '@typescript-eslint/no-empty-interface': 'off',
              '@typescript-eslint/no-for-in-array': 'error',
              '@typescript-eslint/no-inferrable-types': 'error',
              '@typescript-eslint/no-misused-new': 'error',
              '@typescript-eslint/no-non-null-assertion': 'error',
              'no-shadow': 'off',
              '@typescript-eslint/no-shadow': [
                  'error',
                  {
                      hoist: 'all',
                  },
              ],
              '@typescript-eslint/no-unused-vars': 'off',
              'unused-imports/no-unused-imports': 'error',
              'unused-imports/no-unused-vars': [
                  'warn',
                  { 'vars': 'all', 'varsIgnorePattern': '^_', 'args': 'after-used', 'argsIgnorePattern': '^_' }
              ],
              'no-unused-expressions': 'off',
              '@typescript-eslint/no-unused-expressions': [
                  'error',
                  {
                      allowTernary: true
                  }
              ],
              '@typescript-eslint/prefer-for-of': 'error',
              '@typescript-eslint/prefer-function-type': 'error',
              quotes: 'off',
              '@typescript-eslint/quotes': [
                  'error',
                  'single',
                  {
                      allowTemplateLiterals: true,
                  },
              ],
              semi: 'off',
              '@typescript-eslint/semi': 'error',
              '@typescript-eslint/type-annotation-spacing': 'error',
              '@typescript-eslint/unified-signatures': 'error',
              'arrow-body-style': ['warn', 'as-needed'],
              'arrow-parens': ['off', 'always'],
              'brace-style': 'error',
              'comma-dangle': ['error', 'always-multiline'],
              complexity: ['error', 10],
              'constructor-super': 'error',
              curly: 'error',
              'dot-notation': 'off',
              'eol-last': 'error',
              eqeqeq: 'error',
              'guard-for-in': 'error',
              'id-denylist': 'off',
              'id-match': 'off',
              'import/no-deprecated': 'warn',
              'import/order': 'error',
              'max-classes-per-file': 'off',
              'max-len': 'off',
              'new-parens': 'error',
              'newline-per-chained-call': ['error', { ignoreChainWithDepth: 2 }],
              'no-bitwise': 'error',
              'no-caller': 'error',
              'no-debugger': 'error',
              'import/no-duplicates': 'error',
              'no-eval': 'error',
              'no-extra-semi': 'error',
              'no-fallthrough': 'error',
              'no-multi-spaces': 'error',
              'no-irregular-whitespace': 'error',
              'no-multiple-empty-lines': 'error',
              'no-new-wrappers': 'error',
              'no-restricted-imports': [ 'error', { paths: ['rxjs/Rx'] } ],
              'no-return-await': 'error',
              'no-throw-literal': 'error',
              'no-trailing-spaces': 'off',
              'no-undef-init': 'error',
              'no-underscore-dangle': 'off',
              'no-unused-labels': 'error',
              'no-var': 'error',
              'padded-blocks': [
                  'off',
                  {
                      blocks: 'never',
                  },
                  {
                      allowSingleLineBlocks: true,
                  },
              ],
              'prefer-const': 'error',
              'quote-props': 'off',
              radix: 'error',
              'space-before-function-paren': 'off',
              'space-in-parens': ['off', 'never'],
              'spaced-comment': [
                  'error',
                  'always',
                  {
                      markers: ['/'],
                  },
              ],
              'object-curly-spacing': ['error', 'always'],
          },
      },
      {
          files: ['*.html'],
          plugins: ['@angular-eslint'],
          extends: ['plugin:@angular-eslint/template/recommended'],
          rules: {
              '@angular-eslint/template/no-negated-async': 'error',
              '@angular-eslint/template/eqeqeq': 'error',
              "@angular-eslint/template/attributes-order": "error",
              '@angular-eslint/template/no-call-expression': 'error',
              '@angular-eslint/template/use-track-by-function': 'error',
              '@angular-eslint/template/conditional-complexity': ['error', { maxComplexity: 10 }],
              '@angular-eslint/template/cyclomatic-complexity': ['error', { maxComplexity: 20 }],
          },
      },
  ],
};
